#####INPUTS###########
#S for Susceptible, = Regional Population (set to NY State)
S = 20100000

#Comcast EE Count in Region - used to subset cases, can remove if you want to run for the full regional population
C_EE = 8968

#I for Infections, Current count of Infections in the Region (set to NY state 3/27 but this shit is moving fast)
Inf = 38977

#Rate of Dection - Attempts to account for under-testing
RoD = 0.15

#Comcast Pop as Proportion of Regional Pop
com_pop = (C_EE)/S

#Doubling time - used instead of a R0 but essentially the same thing. This input is the most important to the shape of the curve.
doubling_time = 2 #3 day doubling time to start

#Recovery days - time it takes someone to recover, really just impacts the back end of curve
recovery_days = 14.0

####################
#Initial calculations and setting of parameters. Gamma, Beta and the intrinsitc growth rate are
# what make the math work. First line is just defining SIR. R is honestly not even necessary.
S, I, R = S, (Inf/RoD), 0
n_days = 200
gamma = 1 / recovery_days
hosp_los=1
intrinsic_growth_rate = 2 ** (1 / doubling_time) - 1
beta = (
    intrinsic_growth_rate + gamma) / S
    
####################    
#Just need Numpy, Pandas and Matplotlib is for the graph, directory is just to spit out dataframe
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

##UPDATE YOUR DIRECTORY FOR .CSV OUTPUT
main_dir =  "C:\\Users\\ccolam127\\OneDrive - Comcast" #change this to data-science-academy
data_dir = main_dir + "\COVID\SIR Model"

###################
# The SIR model, one time step
def sir(y, beta, gamma, N):
    S, I, R = y
    Sn = (-beta * S * I) + S
    In = (beta * S * I - gamma * I) + I
    Rn = gamma * I + R
    if Sn < 0:
        Sn = 0
    if In < 0:
        In = 0
    if Rn < 0:
        Rn = 0

    scale = N / (Sn + In + Rn)
    return Sn * scale, In * scale, Rn * scale
###########################
#SIR Model to move forward in time
def sim_sir(S, I, R, beta, gamma, n_days, beta_decay=None):
    N = S + I + R
    s, i, r = [S], [I], [R]
    for day in range(n_days):
        y = S, I, R
        S, I, R = sir(y, beta, gamma, N)
        if beta_decay:
            beta = beta * (1 - beta_decay)
        s.append(S)
        i.append(I)
        r.append(R)

    s, i, r = np.array(s), np.array(i), np.array(r)
    return s, i, r
beta_decay = 0.0
s, i, r = sim_sir(S, I, R, beta, gamma, n_days, beta_decay=beta_decay)
############################

#This step can be removed to run for the full population. At this point you have what we've come here to do
# a forecast of the number of infections over time. The rest is formatting and graph making. 

cases = i * com_pop

############################
#These next steps could probably simplified but they work for me so I didn't mess with them.
#If you just make a DF with the cases above that's enough. 

days = np.array(range(0, n_days + 1))
data_list = [days, cases#, icu, ventf
             ]
data_dict = dict(zip(["day", "cases"], data_list))

projection = pd.DataFrame.from_dict(data_dict)

projection_admits = projection.iloc[:-1, :] 
projection_admits[projection_admits < 0] = 0

plot_projection_days = n_days
projection_admits["day"] = range(projection_admits.shape[0])

############################
#For the chart and the dataframe

los_dict = {
    "cases": hosp_los#,
    #"icu": icu_los,
    #"vent": vent_los,
}

fig, ax = plt.subplots(1, 1, figsize=(10, 4))

census_dict = {}
for k, los in los_dict.items():
    census = (
        projection_admits.cumsum().iloc[:-los, :]
        - projection_admits.cumsum().shift(los).fillna(0)
    ).apply(np.ceil)
    census_dict[k] = census[k]
    ax.plot(census.head(plot_projection_days)[k], ".-", label="census")
    ax.legend(loc=0)

ax.set_xlabel("Days from today")
ax.grid("on")
ax.set_ylabel("Census")

############################
census_df = pd.DataFrame(census_dict)
census_df["day"] = census_df.index
census_df = census_df[["day", "cases"#, "icu", "vent"
                       ]]

census_table = census_df[np.mod(census_df.index, 7) == 0].copy()
census_table.index = range(census_table.shape[0])
census_table.loc[0, :] = 0
census_table = census_table.dropna().astype(int)
print(census_df)